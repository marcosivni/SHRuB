#include "SetupManager.hpp"

SetupManager::SetupManager(int argc, char* argv[]){

    char ch;

    pTranslatedRegular = true;
    pParseTree = false;

    if (argc == 1){
        cout << ">> Siren Login <<" << endl;
        cout << "User: ";
        cin >> user;
        ch = (char) upDownArrowOrRegularChar();
        cout << "Password: ";
        ch = (char) upDownArrowOrRegularChar();
        while (ch != '\n'){
            if (!((ch == 8) || (ch == 127))){
                password += ch;
                cout << "*";
            } else {
                if (password.size() > 0){
                    cout << '\b';
                    cout << " ";
                    cout << '\b';
                    string aux;
                    for (int x = 0; x < password.size()-1; x++){
                        aux += password[x];
                    }
                    password.clear();
                    password = aux;
                }
            }
            ch = (char) upDownArrowOrRegularChar();
        }
        cout << endl;
        dbms = 2;
        ip = "localhost";
        port = "34567"; // Postgres
        //port = "3306"; // MySQL
    } else {
        int x = 0;
        bool u, p, d, i, P;
        u = p = d = i = P = false;

        while (x < argc){
            string aux = argv[x];

            if (aux == "-u"){
                if ((x+1) < argc){
                    user = argv[x + 1];
                    u = true;
                } else {
                    throw new std::exception();
                }
                x++;
            }

            if (aux == "-p"){
                if ((x+1) < argc){
                    password = argv[x + 1];
                    p = true;
                } else {
                    throw new std::exception();
                }
                x++;
            }

            if (aux == "-d"){
                if ((x+1) < argc){
                    dbms = atoi(argv[x + 1]);
                    d = true;
                } else {
                    throw new std::exception();
                }
                x++;
            }

            if (aux == "-i"){
                if ((x+1) < argc){
                    ip = argv[x + 1];
                    i = true;
                } else {
                    throw new std::exception();
                }
                x++;
            }

            if (aux == "-P"){
                if ((x+1) < argc){
                    port = argv[x + 1];
                    P = true;
                } else {
                    throw new std::exception();
                }
                x++;
            }

            if (aux == "--help"){
                cout << "Usage [OPTIONS]: " << endl;
                cout << setw (13) << "-u " << "To input an username to connect to the database." << endl;
                cout << setw (13) << "-p " << "To input an user password to connect to the database." << endl;
                cout << setw (13) << "-d " << "Specify a valid SIREN DBMS. 1 for Oracle (R), 2 for PostGres (R) and (3) for MySQL (R)." << endl;
                cout << setw (13) << "-i " << "A valid connection ip of the database server. Type 'localhost' for local instances of DBMS." << endl;
                cout << setw (13) << "-P " << "To input a valid port to connect to the database." << endl;
                cout << setw (13) << "-optimizer " << "To display the query plan when execution queries on SIREN." << endl;
                cout << setw (13) << "-translate " << "To see the regular SQL generated by SIREN." << endl;
                throw new std::string();
            }

            if (aux == "-optimizer"){
                pParseTree = true;
            }

            if (aux == "-translate"){
                pTranslatedRegular = true;
            }

            x++;
        }


        if ((!u) || (!p)){
            cout << ">> Siren Login <<" << endl;
        }

        if (!u){
            cout << "User: ";
            cin >> user;
            ch = (char) upDownArrowOrRegularChar();
        }

        if (!p){
            cout << "Password: ";
            ch = (char) upDownArrowOrRegularChar();
            while (ch != '\n'){

                if (!((ch == 8) || (ch == 127))){
                    password += ch;
                    cout << "*";
                } else {
                    if (password.size() > 0){
                        cout << '\b';
                        cout << " ";
                        cout << '\b';
                        string aux;
                        for (int x = 0; x < password.size()-1; x++){
                            aux += password[x];
                        }
                        password.clear();
                        password = aux;
                    }
                }

                ch = (char) upDownArrowOrRegularChar();
            }
            cout << endl;
        }

        if (!d){
            dbms = 3;
        }

        if (!i){
            ip = "localhost";
        }

        if (!P){
            port = "3306";
        }
    }
}

DatabaseManager * SetupManager::newDBMSInstance(){

    return new DatabaseManager(user, password, ip, dbms, port);
}

bool SetupManager::printParseTree(){

    return pParseTree;
}

bool SetupManager::printTranslatedSQL(){

    return pTranslatedRegular;
}

